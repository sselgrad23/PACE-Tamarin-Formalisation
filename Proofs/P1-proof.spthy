theory P1 begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



rule (modulo E) Register_Key:
   [ Fr( ~k ) ]
  --[ Register_Key( $B, $A, ~k ) ]->
   [ !Ltk( $B, $A, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk_A:
   [ !Ltk( B, A, ltk ) ] --[ Reveal( A ) ]-> [ Out( ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk_B:
   [ !Ltk( B, A, ltk ) ] --[ Reveal( B ) ]-> [ Out( ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_A:
   [ Fr( ~id ), !Ltk( B, A, ltkBA ) ]
  --[ Create_A( A, ~id ) ]->
   [ St_A_1( A, ~id, ltkBA, B ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_B:
   [ Fr( ~id ), !Ltk( B, A, ltkBA ) ]
  --[ Create_B( B, ~id ) ]->
   [ St_B_1( B, ~id, ltkBA, A ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_1_send:
   [ St_A_1( A, id, ltkBA, B ), Fr( ~x ) ]
  --[ Send( A, ~x ), Running( A, B, <'R', 'I', ~x> ) ]->
   [ St_A_2( A, id, ltkBA, B, ~x ), Out( ~x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_1_receive:
   [ St_B_1( B, id, ltkBA, A ), In( x ) ]
  --[ Recv( B, x ), Running( B, A, <'I', 'R', x> ) ]->
   [ St_B_2( B, id, ltkBA, A, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_2_send:
   [ St_B_2( B, id, ltkBA, A, x ) ]
  --[ Send( B, senc(x, ltkBA) ), Commit( B, A, <'R', 'I', x> ) ]->
   [ St_B_3( B, id, ltkBA, A, x ), Out( senc(x, ltkBA) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_2_receive:
   [ St_A_2( A, id, ltkBA, B, x ), In( senc(x, ltkBA) ) ]
  --[
  Rcv( A, senc(x, ltkBA) ), Commit( A, B, <'I', 'R', x> ),
  Honest( A ), Honest( B ), Finish( )
  ]->
   [ St_A_3( A, id, ltkBA, B, x ) ]

  /* has exactly the trivial AC variant */

restriction unidirectional_key:
  "∀ a b k1 k2 #i #j.
    ((Register_Key( a, b, k1 ) @ #i) ∧
     (Register_Key( b, a, k2 ) @ #j)) ⇒
    (¬(k1 = k2))"
  // safety formula

lemma executable:
  exists-trace "∃ #i. Finish( ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ #i. (Finish( ) @ #i)"
*/
simplify
solve( St_A_2( A, id, ltkBA, B, x ) ▶₀ #i )
  case A_1_send
  solve( !KU( senc(~x, ~k) ) @ #vk )
    case B_2_send
    solve( !KU( ~x ) @ #vk.1 )
      case A_1_send
      SOLVED // trace found
    qed
  qed
qed

lemma injectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'I', 'R', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'I', 'R', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case A_2_receive
  solve( St_A_2( a, id, ltkBA, b, t ) ▶₀ #i )
    case A_1_send
    solve( !KU( senc(~x, ~k) ) @ #vk )
      case B_2_send
      solve( (#i2 < #i)  ∥ (#i < #i2) )
        case case_1
        solve( Commit( a2, b2, <'I', 'R', ~x> ) @ #i2 )
          case A_2_receive
          solve( St_A_2( a2, id.1, ltkBA, b2, ~x ) ▶₀ #i2 )
            case A_1_send
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( Commit( a2, b2, <'I', 'R', ~x> ) @ #i2 )
          case A_2_receive
          solve( St_A_2( a2, id.1, ltkBA, b2, ~x ) ▶₀ #i2 )
            case A_1_send
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( ~k ) @ #vk.2 )
        case Reveal_ltk_A
        by contradiction /* from formulas */
      next
        case Reveal_ltk_B
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma injectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'R', 'I', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'R', 'I', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case B_2_send
  solve( St_B_2( a, id, ltkBA, b, t ) ▶₀ #i )
    case B_1_receive
    SOLVED // trace found
  qed
qed

/* All well-formedness checks were successful. */

end