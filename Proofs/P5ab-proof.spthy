theory P5ab begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: fst/1, h/1, kdf/3, map/2, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2



rule (modulo E) Register_Key:
   [ Fr( ~k ) ]
  --[ Register_Key( $A, $B, ~k ) ]->
   [ !Ltk( $A, $B, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk_A:
   [ !Ltk( B, A, ltk ) ] --[ Reveal( A ) ]-> [ Out( ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk_B:
   [ !Ltk( B, A, ltk ) ] --[ Reveal( B ) ]-> [ Out( ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_A:
   [ Fr( ~id ), !Ltk( A, B, ltk ) ]
  --[ Create_A( A, ~id ) ]->
   [ St_A_1( A, ~id, ltk, B ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_B:
   [ Fr( ~id ), !Ltk( A, B, ltk ) ]
  --[ Create_B( B, ~id ) ]->
   [ St_B_1( B, ~id, ltk, A ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_1_send:
   [ St_A_1( A, id, ltk, B ), Fr( ~x ), Fr( ~s ) ]
  --[ Send( A, <'INITIATOR', map(~s, $p)^~x, senc(~s, h(ltk)), $p> )
  ]->
   [
   St_A_2( A, id, ltk, B, ~x, ~s, $p ),
   Out( <'INITIATOR', map(~s, $p)^~x, senc(~s, h(ltk)), $p> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_1_receive:
   [
   St_B_1( B, id, ltk, A ),
   In( <'INITIATOR', gx, senc(s, h(ltk)), p> )
   ]
  --[ Recv( B, <'INITIATOR', gx, senc(s, h(ltk)), p> ) ]->
   [ St_B_2( B, id, ltk, A, gx, s, p ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_2_send:
   [ St_B_2( B, id, ltk, A, gx, s, p ), Fr( ~y ) ]
  --[
  Send( B, <'RESPONDER', map(s, p)^~y> ),
  Running( B, A, <'I', 'R', gx, map(s, p)^~y, h(gx^~y)> )
  ]->
   [
   St_B_3( B, id, ltk, A, gx, s, p, ~y, h(gx^~y) ),
   Out( <'RESPONDER', map(s, p)^~y> )
   ]

  /*
  rule (modulo AC) B_2_send:
     [ St_B_2( B, id, ltk, A, gx, s, p ), Fr( ~y ) ]
    --[
    Send( B, <'RESPONDER', map(s, p)^~y> ),
    Running( B, A, <'I', 'R', gx, map(s, p)^~y, h(z)> )
    ]->
     [
     St_B_3( B, id, ltk, A, gx, s, p, ~y, h(z) ),
     Out( <'RESPONDER', map(s, p)^~y> )
     ]
    variants (modulo AC)
    1. ~y    = ~y.26
       gx    = gx.29
       z     = gx.29^~y.26
    
    2. ~y    = ~y.27
       gx    = z.35^inv(~y.27)
       z     = z.35
    
    3. ~y    = ~y.153
       gx    = x.303^x.304
       z     = x.303^(~y.153*x.304)
    
    4. ~y    = ~y.156
       gx    = x.309^inv((~y.156*x.310))
       z     = x.309^inv(x.310)
    
    5. ~y    = ~y.156
       gx    = x.309^(x.310*inv(~y.156))
       z     = x.309^x.310
    
    6. ~y    = ~y.157
       gx    = x.310^(x.311*inv((~y.157*x.312)))
       z     = x.310^(x.311*inv(x.312))
  */

rule (modulo E) A_3_receive:
   [ St_A_2( A, id, ltk, B, x, s, p ), In( <'RESPONDER', gy> ) ]
  --[
  Recv( A, <'RESPONDER', gy> ),
  Running( A, B, <'R', 'I', map(s, p)^x, gy, h(gy^x)> )
  ]->
   [ St_A_3( A, id, ltk, B, x, s, p, gy, h(gy^x) ) ]

  /*
  rule (modulo AC) A_3_receive:
     [ St_A_2( A, id, ltk, B, x, s, p ), In( <'RESPONDER', gy> ) ]
    --[
    Recv( A, <'RESPONDER', gy> ),
    Running( A, B, <'R', 'I', z.1, gy, h(z)> )
    ]->
     [ St_A_3( A, id, ltk, B, x, s, p, gy, h(z) ) ]
    variants (modulo AC)
     1. gy    = gy.19
        p     = p.22
        s     = s.23
        x     = one
        z     = gy.19
        z.1   = map(s.23, p.22)
    
     2. gy    = gy.20
        p     = p.23
        s     = s.24
        x     = x.25
        z     = gy.20^x.25
        z.1   = map(s.24, p.23)^x.25
    
     3. gy    = z.23^inv(x.21)
        p     = p.19
        s     = s.20
        x     = x.21
        z     = z.23
        z.1   = map(s.20, p.19)^x.21
    
     4. gy    = z.36^x.57
        p     = p.32
        s     = s.33
        x     = inv(x.57)
        z     = z.36
        z.1   = map(s.33, p.32)^inv(x.57)
    
     5. gy    = z.37^(x.58*inv(x.59))
        p     = p.33
        s     = s.34
        x     = (x.59*inv(x.58))
        z     = z.37
        z.1   = map(s.34, p.33)^(x.59*inv(x.58))
    
     6. gy    = x.56^x.57
        p     = p.32
        s     = s.33
        x     = x.34
        z     = x.56^(x.34*x.57)
        z.1   = map(s.33, p.32)^x.34
    
     7. gy    = x.56^(x.57*inv(x.34))
        p     = p.32
        s     = s.33
        x     = x.34
        z     = x.56^x.57
        z.1   = map(s.33, p.32)^x.34
    
     8. gy    = x.57^inv((x.35*x.59))
        p     = p.33
        s     = s.34
        x     = x.35
        z     = x.57^inv(x.59)
        z.1   = map(s.34, p.33)^x.35
    
     9. gy    = x.57^(x.58*x.59)
        p     = p.33
        s     = s.34
        x     = inv(x.58)
        z     = x.57^x.59
        z.1   = map(s.34, p.33)^inv(x.58)
    
    10. gy    = x.58^(x.59*x.60*inv(x.61))
        p     = p.34
        s     = s.35
        x     = (x.61*inv(x.59))
        z     = x.58^x.60
        z.1   = map(s.35, p.34)^(x.61*inv(x.59))
    
    11. gy    = x.58^(x.59*inv((x.36*x.61)))
        p     = p.34
        s     = s.35
        x     = x.36
        z     = x.58^(x.59*inv(x.61))
        z.1   = map(s.35, p.34)^x.36
    
    12. gy    = x.58^(x.59*inv((x.60*x.61)))
        p     = p.34
        s     = s.35
        x     = (x.60*inv(x.59))
        z     = x.58^inv(x.61)
        z.1   = map(s.35, p.34)^(x.60*inv(x.59))
    
    13. gy    = x.59^(x.60*x.61*inv((x.62*x.63)))
        p     = p.35
        s     = s.36
        x     = (x.62*inv(x.60))
        z     = x.59^(x.61*inv(x.63))
        z.1   = map(s.36, p.35)^(x.62*inv(x.60))
    
    14. gy    = x.61^x.62
        p     = p.37
        s     = s.38
        x     = inv((x.62*x.67))
        z     = x.61^inv(x.67)
        z.1   = map(s.38, p.37)^inv((x.62*x.67))
    
    15. gy    = x.61^x.62
        p     = p.37
        s     = s.38
        x     = (x.67*inv(x.62))
        z     = x.61^x.67
        z.1   = map(s.38, p.37)^(x.67*inv(x.62))
    
    16. gy    = x.61^inv(x.62)
        p     = p.37
        s     = s.38
        x     = inv(x.67)
        z     = x.61^inv((x.62*x.67))
        z.1   = map(s.38, p.37)^inv(x.67)
    
    17. gy    = x.61^inv(x.62)
        p     = p.37
        s     = s.38
        x     = (x.62*x.67)
        z     = x.61^x.67
        z.1   = map(s.38, p.37)^(x.62*x.67)
    
    18. gy    = x.62^x.63
        p     = p.38
        s     = s.39
        x     = (x.68*inv((x.63*x.69)))
        z     = x.62^(x.68*inv(x.69))
        z.1   = map(s.39, p.38)^(x.68*inv((x.63*x.69)))
    
    19. gy    = x.62^inv(x.63)
        p     = p.38
        s     = s.39
        x     = (x.68*inv(x.69))
        z     = x.62^(x.68*inv((x.63*x.69)))
        z.1   = map(s.39, p.38)^(x.68*inv(x.69))
    
    20. gy    = x.62^inv((x.63*x.64))
        p     = p.38
        s     = s.39
        x     = (x.63*x.69)
        z     = x.62^(x.69*inv(x.64))
        z.1   = map(s.39, p.38)^(x.63*x.69)
    
    21. gy    = x.62^inv((x.63*x.64))
        p     = p.38
        s     = s.39
        x     = (x.63*inv(x.69))
        z     = x.62^inv((x.64*x.69))
        z.1   = map(s.39, p.38)^(x.63*inv(x.69))
    
    22. gy    = x.62^(x.63*x.64)
        p     = p.38
        s     = s.39
        x     = inv((x.63*x.69))
        z     = x.62^(x.64*inv(x.69))
        z.1   = map(s.39, p.38)^inv((x.63*x.69))
    
    23. gy    = x.62^(x.63*x.64)
        p     = p.38
        s     = s.39
        x     = (x.69*inv(x.63))
        z     = x.62^(x.64*x.69)
        z.1   = map(s.39, p.38)^(x.69*inv(x.63))
    
    24. gy    = x.62^(x.63*inv(x.64))
        p     = p.38
        s     = s.39
        x     = inv(x.69)
        z     = x.62^(x.63*inv((x.64*x.69)))
        z.1   = map(s.39, p.38)^inv(x.69)
    
    25. gy    = x.62^(x.63*inv(x.64))
        p     = p.38
        s     = s.39
        x     = inv((x.63*x.69))
        z     = x.62^inv((x.64*x.69))
        z.1   = map(s.39, p.38)^inv((x.63*x.69))
    
    26. gy    = x.62^(x.63*inv(x.64))
        p     = p.38
        s     = s.39
        x     = (x.64*x.69)
        z     = x.62^(x.63*x.69)
        z.1   = map(s.39, p.38)^(x.64*x.69)
    
    27. gy    = x.62^(x.63*inv(x.64))
        p     = p.38
        s     = s.39
        x     = (x.64*x.69*inv(x.63))
        z     = x.62^x.69
        z.1   = map(s.39, p.38)^(x.64*x.69*inv(x.63))
    
    28. gy    = x.62^(x.63*inv(x.64))
        p     = p.38
        s     = s.39
        x     = (x.64*inv((x.63*x.69)))
        z     = x.62^inv(x.69)
        z.1   = map(s.39, p.38)^(x.64*inv((x.63*x.69)))
    
    29. gy    = x.63^inv((x.64*x.65))
        p     = p.39
        s     = s.40
        x     = (x.64*x.70*inv(x.71))
        z     = x.63^(x.70*inv((x.65*x.71)))
        z.1   = map(s.40, p.39)^(x.64*x.70*inv(x.71))
    
    30. gy    = x.63^(x.64*x.65)
        p     = p.39
        s     = s.40
        x     = (x.70*inv((x.64*x.71)))
        z     = x.63^(x.65*x.70*inv(x.71))
        z.1   = map(s.40, p.39)^(x.70*inv((x.64*x.71)))
    
    31. gy    = x.63^(x.64*x.65*inv(x.66))
        p     = p.39
        s     = s.40
        x     = inv((x.64*x.71))
        z     = x.63^(x.65*inv((x.66*x.71)))
        z.1   = map(s.40, p.39)^inv((x.64*x.71))
    
    32. gy    = x.63^(x.64*x.65*inv(x.66))
        p     = p.39
        s     = s.40
        x     = (x.66*x.71*inv(x.64))
        z     = x.63^(x.65*x.71)
        z.1   = map(s.40, p.39)^(x.66*x.71*inv(x.64))
    
    33. gy    = x.63^(x.64*x.65*inv(x.66))
        p     = p.39
        s     = s.40
        x     = (x.66*inv((x.64*x.71)))
        z     = x.63^(x.65*inv(x.71))
        z.1   = map(s.40, p.39)^(x.66*inv((x.64*x.71)))
    
    34. gy    = x.63^(x.64*inv(x.65))
        p     = p.39
        s     = s.40
        x     = (x.65*x.70*inv((x.64*x.71)))
        z     = x.63^(x.70*inv(x.71))
        z.1   = map(s.40, p.39)^(x.65*x.70*inv((x.64*x.71)))
    
    35. gy    = x.63^(x.64*inv(x.65))
        p     = p.39
        s     = s.40
        x     = (x.70*inv(x.71))
        z     = x.63^(x.64*x.70*inv((x.65*x.71)))
        z.1   = map(s.40, p.39)^(x.70*inv(x.71))
    
    36. gy    = x.63^(x.64*inv(x.65))
        p     = p.39
        s     = s.40
        x     = (x.70*inv((x.64*x.71)))
        z     = x.63^(x.70*inv((x.65*x.71)))
        z.1   = map(s.40, p.39)^(x.70*inv((x.64*x.71)))
    
    37. gy    = x.63^(x.64*inv((x.65*x.66)))
        p     = p.39
        s     = s.40
        x     = (x.65*x.71)
        z     = x.63^(x.64*x.71*inv(x.66))
        z.1   = map(s.40, p.39)^(x.65*x.71)
    
    38. gy    = x.63^(x.64*inv((x.65*x.66)))
        p     = p.39
        s     = s.40
        x     = (x.65*x.71*inv(x.64))
        z     = x.63^(x.71*inv(x.66))
        z.1   = map(s.40, p.39)^(x.65*x.71*inv(x.64))
    
    39. gy    = x.63^(x.64*inv((x.65*x.66)))
        p     = p.39
        s     = s.40
        x     = (x.65*inv(x.71))
        z     = x.63^(x.64*inv((x.66*x.71)))
        z.1   = map(s.40, p.39)^(x.65*inv(x.71))
    
    40. gy    = x.63^(x.64*inv((x.65*x.66)))
        p     = p.39
        s     = s.40
        x     = (x.65*inv((x.64*x.71)))
        z     = x.63^inv((x.66*x.71))
        z.1   = map(s.40, p.39)^(x.65*inv((x.64*x.71)))
    
    41. gy    = x.64^(x.65*x.66*inv(x.67))
        p     = p.40
        s     = s.41
        x     = (x.67*x.72*inv((x.65*x.73)))
        z     = x.64^(x.66*x.72*inv(x.73))
        z.1   = map(s.41, p.40)^(x.67*x.72*inv((x.65*x.73)))
    
    42. gy    = x.64^(x.65*x.66*inv(x.67))
        p     = p.40
        s     = s.41
        x     = (x.72*inv((x.65*x.73)))
        z     = x.64^(x.66*x.72*inv((x.67*x.73)))
        z.1   = map(s.41, p.40)^(x.72*inv((x.65*x.73)))
    
    43. gy    = x.64^(x.65*x.66*inv((x.67*x.68)))
        p     = p.40
        s     = s.41
        x     = (x.67*x.73*inv(x.65))
        z     = x.64^(x.66*x.73*inv(x.68))
        z.1   = map(s.41, p.40)^(x.67*x.73*inv(x.65))
    
    44. gy    = x.64^(x.65*x.66*inv((x.67*x.68)))
        p     = p.40
        s     = s.41
        x     = (x.67*inv((x.65*x.73)))
        z     = x.64^(x.66*inv((x.68*x.73)))
        z.1   = map(s.41, p.40)^(x.67*inv((x.65*x.73)))
    
    45. gy    = x.64^(x.65*inv((x.66*x.67)))
        p     = p.40
        s     = s.41
        x     = (x.66*x.72*inv(x.73))
        z     = x.64^(x.65*x.72*inv((x.67*x.73)))
        z.1   = map(s.41, p.40)^(x.66*x.72*inv(x.73))
    
    46. gy    = x.64^(x.65*inv((x.66*x.67)))
        p     = p.40
        s     = s.41
        x     = (x.66*x.72*inv((x.65*x.73)))
        z     = x.64^(x.72*inv((x.67*x.73)))
        z.1   = map(s.41, p.40)^(x.66*x.72*inv((x.65*x.73)))
    
    47. gy    = x.65^(x.66*x.67*inv((x.68*x.69)))
        p     = p.41
        s     = s.42
        x     = (x.68*x.74*inv((x.66*x.75)))
        z     = x.65^(x.67*x.74*inv((x.69*x.75)))
        z.1   = map(s.42, p.41)^(x.68*x.74*inv((x.66*x.75)))
  */

rule (modulo E) A_4_send:
   [ St_A_3( A, id, ltk, B, x, s, p, gy, Kab ) ]
  --[ Send( A, senc(<'INITIATOR', gy>, Kab) ) ]->
   [
   St_A_4( A, id, ltk, B, x, s, p, gy, Kab ),
   Out( senc(<'INITIATOR', gy>, Kab) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_3_receive:
   [
   St_B_3( B, id, ltk, A, gx, s, p, y, Kab ),
   In( senc(<'INITIATOR', map(s, p)^y>, Kab) )
   ]
  --[ Rcv( B, senc(<'INITIATOR', map(s, p)^y>, Kab) ) ]->
   [ St_B_4( B, id, ltk, A, gx, s, p, y, Kab ) ]

  /*
  rule (modulo AC) B_3_receive:
     [
     St_B_3( B, id, ltk, A, gx, s, p, y, Kab ),
     In( senc(<'INITIATOR', z>, Kab) )
     ]
    --[ Rcv( B, senc(<'INITIATOR', z>, Kab) ) ]->
     [ St_B_4( B, id, ltk, A, gx, s, p, y, Kab ) ]
    variants (modulo AC)
    1. p     = p.13
       s     = s.14
       y     = y.15
       z     = map(s.14, p.13)^y.15
    
    2. p     = p.13
       s     = s.14
       y     = one
       z     = map(s.14, p.13)
  */

rule (modulo E) B_4_send:
   [ St_B_4( B, id, ltk, A, gx, s, p, y, Kab ) ]
  --[
  Send( B, senc(<'RESPONDER', gx>, Kab) ),
  Commit( B, A, <'R', 'I', gx, map(s, p)^y, Kab> ), Secret( B, Kab ),
  Honest( A ), Honest( B ), Finish( B, A, 'R' )
  ]->
   [
   St_B_5( B, id, ltk, A, gx, s, p, y, Kab ),
   Out( senc(<'RESPONDER', gx>, Kab) )
   ]

  /*
  rule (modulo AC) B_4_send:
     [ St_B_4( B, id, ltk, A, gx, s, p, y, Kab ) ]
    --[
    Send( B, senc(<'RESPONDER', gx>, Kab) ),
    Commit( B, A, <'R', 'I', gx, z, Kab> ), Secret( B, Kab ),
    Honest( A ), Honest( B ), Finish( B, A, 'R' )
    ]->
     [
     St_B_5( B, id, ltk, A, gx, s, p, y, Kab ),
     Out( senc(<'RESPONDER', gx>, Kab) )
     ]
    variants (modulo AC)
    1. p     = p.16
       s     = s.17
       y     = one
       z     = map(s.17, p.16)
    
    2. p     = p.17
       s     = s.18
       y     = y.19
       z     = map(s.18, p.17)^y.19
  */

rule (modulo E) A_5_receive:
   [
   St_A_4( A, id, ltk, B, x, s, p, gy, Kab ),
   In( senc(<'RESPONDER', map(s, p)^x>, Kab) )
   ]
  --[
  Recv( A, senc(<'RESPONDER', map(s, p)^x>, Kab) ),
  Commit( A, B, <'I', 'R', map(s, p)^x, gy, Kab> ), Secret( A, Kab ),
  Honest( A ), Honest( B ), Finish( A, B, 'I' )
  ]->
   [ St_A_5( A, id, ltk, B, x, s, p, gy, Kab ) ]

  /*
  rule (modulo AC) A_5_receive:
     [
     St_A_4( A, id, ltk, B, x, s, p, gy, Kab ),
     In( senc(<'RESPONDER', z>, Kab) )
     ]
    --[
    Recv( A, senc(<'RESPONDER', z>, Kab) ),
    Commit( A, B, <'I', 'R', z, gy, Kab> ), Secret( A, Kab ),
    Honest( A ), Honest( B ), Finish( A, B, 'I' )
    ]->
     [ St_A_5( A, id, ltk, B, x, s, p, gy, Kab ) ]
    variants (modulo AC)
    1. p     = p.14
       s     = s.15
       x     = one
       z     = map(s.15, p.14)
    
    2. p     = p.15
       s     = s.16
       x     = x.17
       z     = map(s.16, p.15)^x.17
  */

lemma executable:
  exists-trace
  "∃ a b #i #j.
    ((((Finish( a, b, 'I' ) @ #i) ∧ (Finish( b, a, 'R' ) @ #j)) ∧
      (∀ c d id1 id2 #k #l.
        ((Create_A( c, id1 ) @ #k) ∧ (Create_A( d, id2 ) @ #l)) ⇒
        (id1 = id2))) ∧
     (∀ e f id3 id4 #m #n.
       ((Create_B( e, id3 ) @ #m) ∧ (Create_B( f, id4 ) @ #n)) ⇒
       (id3 = id4))) ∧
    (¬(∃ X #o. Reveal( X ) @ #o))"
/*
guarded formula characterizing all satisfying traces:
"∃ a b #i #j.
  (Finish( a, b, 'I' ) @ #i) ∧ (Finish( b, a, 'R' ) @ #j)
 ∧
  (∀ c d id1 id2 #k #l.
    (Create_A( c, id1 ) @ #k) ∧ (Create_A( d, id2 ) @ #l)
   ⇒
    id1 = id2) ∧
  (∀ e f id3 id4 #m #n.
    (Create_B( e, id3 ) @ #m) ∧ (Create_B( f, id4 ) @ #n)
   ⇒
    id3 = id4) ∧
  (∀ X #o. (Reveal( X ) @ #o) ⇒ ⊥)"
*/
simplify
solve( Finish( a, b, 'I' ) @ #i )
  case A_5_receive
  solve( St_A_4( a, id, ltk, b, x, s, p, gy, Kab ) ▶₀ #i )
    case A_4_send
    solve( Finish( $B, $A, 'R' ) @ #j )
      case B_4_send
      solve( St_B_4( $B, id.1, ltk, $A, gx, s.1, p.1, y, Kab ) ▶₀ #j )
        case B_3_receive
        solve( !KU( senc(<'RESPONDER', map(~s, $p)^~x>, h(z)) ) @ #vk )
          case B_4_send
          solve( !KU( senc(<'INITIATOR', map(s.1, p.1)^~y>,
                           h(map(~s, $p)^(~x*~y)))
                 ) @ #vk.4 )
            case A_4_send
            solve( !KU( senc(~s, h(~k.1)) ) @ #vk.10 )
              case A_1_send
              solve( !KU( map(~s, $p)^~x ) @ #vk.9 )
                case A_1_send
                solve( !KU( map(~s, $p)^~y ) @ #vk.8 )
                  case B_2_send
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementINITIATOR:
  all-traces
  "∀ a b t u v #i.
    (Commit( a, b, <'I', 'R', t, u, v> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'I', 'R', t, u, v> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'I', 'R', t, u, v> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t u v #i.
  (Commit( a, b, <'I', 'R', t, u, v> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'I', 'R', t, u, v> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'I', 'R', t, u, v> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t, u, v> ) @ #i )
  case A_5_receive
  solve( St_A_4( a, id, ltk, b, x, s, p, u, v ) ▶₀ #i )
    case A_4_send
    solve( !KU( senc(<'RESPONDER', map(~s, $p)^~x>, h(z)) ) @ #vk )
      case B_4_send
      solve( !KU( senc(<'INITIATOR', map(s.1, p.1)^~y>,
                       h(map(~s, $p)^(~x*~y)))
             ) @ #vk.4 )
        case A_4_send
        solve( !KU( senc(~s, h(~k.1)) ) @ #vk.10 )
          case A_1_send
          solve( (#i2 < #i)  ∥ (#i < #i2) )
            case case_1
            solve( Commit( a2, b2,
                           <'I', 'R', map(~s, $p)^~x, map(~s, $p)^~y, h(map(~s, $p)^(~x*~y))>
                   ) @ #i2 )
              case A_5_receive
              solve( St_A_4( a2, id.1, ltk, b2, ~x, ~s, $p, map(~s, $p)^~y,
                             h(map(~s, $p)^(~x*~y))
                     ) ▶₀ #i2 )
                case A_4_send
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( Commit( a2, b2,
                           <'I', 'R', map(~s, $p)^~x, map(~s, $p)^~y, h(map(~s, $p)^(~x*~y))>
                   ) @ #i2 )
              case A_5_receive
              solve( St_A_4( a2, id.1, ltk, b2, ~x, ~s, $p, map(~s, $p)^~y,
                             h(map(~s, $p)^(~x*~y))
                     ) ▶₀ #i2 )
                case A_4_send
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( ~s ) @ #vk.12 )
            case A_1_send
            solve( !KU( ~k ) @ #vk.15 )
              case Reveal_ltk_A
              by contradiction /* from formulas */
            next
              case Reveal_ltk_B
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( h(map(~s, $p)^(~x*~y)) ) @ #vk.13 )
          case c_h
          solve( !KU( map(~s, $p)^(~x*~y) ) @ #vk.15 )
            case A_1_send_case_1
            by solve( !KU( ~y ) @ #vk.16 )
          next
            case A_1_send_case_2
            by solve( !KU( ~x ) @ #vk.19 )
          next
            case B_2_send_case_1
            by solve( !KU( ~x ) @ #vk.15 )
          next
            case B_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.20 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.18 )
          qed
        qed
      qed
    next
      case c_senc
      solve( splitEqs(1) )
        case split_case_1
        solve( !KU( z^inv(~x) ) @ #vk.4 )
          case A_1_send_case_1
          by solve( !KU( ~x.1 ) @ #vk.9 )
        next
          case A_1_send_case_2
          by solve( !KU( ~x.1 ) @ #vk.10 )
        next
          case B_2_send_case_1
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case B_2_send_case_2
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.9 )
        qed
      next
        case split_case_2
        solve( !KU( h(u^~x) ) @ #vk.5 )
          case c_h
          solve( !KU( u^~x ) @ #vk.7 )
            case A_1_send_case_1
            solve( !KU( map(~s, $p) ) @ #vk.6 )
              case A_1_send
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case B_2_send
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case c_map
              solve( !KU( ~s ) @ #vk.7 )
                case A_1_send
                solve( !KU( ~k ) @ #vk.10 )
                  case Reveal_ltk_A
                  by contradiction /* from formulas */
                next
                  case Reveal_ltk_B
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case A_1_send_case_2
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case B_2_send
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.8 )
          qed
        qed
      next
        case split_case_3
        solve( !KU( h(x.1^(~x*x.2)) ) @ #vk.5 )
          case c_h
          solve( !KU( x.1^(~x*x.2) ) @ #vk.7 )
            case A_1_send_case_1
            by solve( !KU( ~x ) @ #vk.8 )
          next
            case A_1_send_case_2
            solve( !KU( map(~s, $p)^x.1 ) @ #vk.6 )
              case A_1_send_case_1
              by solve( !KU( ~x ) @ #vk.6 )
            next
              case A_1_send_case_2
              by solve( !KU( ~x ) @ #vk.10 )
            next
              case A_1_send_case_3
              by solve( !KU( ~x ) @ #vk.11 )
            next
              case A_1_send_case_4
              by solve( !KU( ~x ) @ #vk.11 )
            next
              case A_1_send_case_5
              by solve( !KU( ~x ) @ #vk.13 )
            next
              case B_2_send_case_1
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case B_2_send_case_2
              by solve( !KU( ~y ) @ #vk.17 )
            next
              case B_2_send_case_3
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case B_2_send_case_4
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case B_2_send_case_5
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case c_exp
              solve( !KU( map(~s, $p) ) @ #vk.9 )
                case A_1_send
                by solve( !KU( ~x ) @ #vk.11 )
              next
                case B_2_send
                by solve( !KU( ~y ) @ #vk.11 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.10 )
                  case A_1_send
                  solve( !KU( ~k ) @ #vk.13 )
                    case Reveal_ltk_A
                    by contradiction /* from formulas */
                  next
                    case Reveal_ltk_B
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case A_1_send_case_3
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case A_1_send_case_4
            by solve( !KU( ~x.2 ) @ #vk.11 )
          next
            case A_1_send_case_5
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case A_1_send_case_6
            by solve( !KU( ~x.3 ) @ #vk.12 )
          next
            case B_2_send_case_1
            by solve( !KU( ~x ) @ #vk.8 )
          next
            case B_2_send_case_2
            by solve( !KU( ~x ) @ #vk.16 )
          next
            case B_2_send_case_3
            by solve( !KU( ~y ) @ #vk.11 )
          next
            case B_2_send_case_4
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case B_2_send_case_5
            by solve( !KU( ~y ) @ #vk.12 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.10 )
          qed
        qed
      next
        case split_case_4
        solve( !KU( x.1^(x.2*inv(~x)) ) @ #vk.4 )
          case A_1_send_case_1
          by solve( !KU( ~x ) @ #vk.8 )
        next
          case A_1_send_case_2
          by solve( !KU( ~x ) @ #vk.10 )
        next
          case A_1_send_case_3
          by solve( !KU( ~x.2 ) @ #vk.10 )
        next
          case A_1_send_case_4
          by solve( !KU( ~x.2 ) @ #vk.11 )
        next
          case B_2_send_case_1
          by solve( !KU( ~x ) @ #vk.15 )
        next
          case B_2_send_case_2
          by solve( !KU( ~x ) @ #vk.17 )
        next
          case B_2_send_case_3
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case B_2_send_case_4
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.11 )
        qed
      next
        case split_case_5
        solve( !KU( x.1^inv((~x*x.2)) ) @ #vk.4 )
          case A_1_send_case_1
          by solve( !KU( ~x.2 ) @ #vk.9 )
        next
          case A_1_send_case_2
          by solve( !KU( ~x.2 ) @ #vk.10 )
        next
          case B_2_send_case_1
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case B_2_send_case_2
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.10 )
        qed
      next
        case split_case_6
        solve( !KU( x.1^(x.2*inv((~x*x.3))) ) @ #vk.4 )
          case A_1_send_case_1
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case A_1_send_case_2
          by solve( !KU( ~x ) @ #vk.11 )
        next
          case A_1_send_case_3
          by solve( !KU( ~x.3 ) @ #vk.10 )
        next
          case A_1_send_case_4
          by solve( !KU( ~x.3 ) @ #vk.11 )
        next
          case B_2_send_case_1
          by solve( !KU( ~x ) @ #vk.16 )
        next
          case B_2_send_case_2
          by solve( !KU( ~x ) @ #vk.18 )
        next
          case B_2_send_case_3
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case B_2_send_case_4
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.12 )
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementRESPONDER:
  all-traces
  "∀ a b t u v #i.
    (Commit( a, b, <'R', 'I', t, u, v> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'R', 'I', t, u, v> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'R', 'I', t, u, v> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t u v #i.
  (Commit( a, b, <'R', 'I', t, u, v> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'R', 'I', t, u, v> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'R', 'I', t, u, v> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t, u, v> ) @ #i )
  case B_4_send
  solve( St_B_4( a, id, ltk, b, t, s, p, y, v ) ▶₀ #i )
    case B_3_receive
    solve( !KU( senc(<'INITIATOR', map(s, p)^~y>, h(z)) ) @ #vk )
      case A_4_send
      solve( !KU( senc(s, h(~k)) ) @ #vk.6 )
        case A_1_send
        solve( !KU( map(~s, p)^~x ) @ #vk.5 )
          case A_1_send_case_1
          solve( (#i2 < #i)  ∥ (#i < #i2) )
            case case_1
            solve( Commit( a2, b2,
                           <'R', 'I', map(~s, $p)^~x, map(~s, $p)^~y, h(map(~s, $p)^(~x*~y))>
                   ) @ #i2 )
              case B_4_send
              solve( St_B_4( a2, id.1, ltk, b2, map(~s, $p)^~x, ~s, $p, ~y,
                             h(map(~s, $p)^(~x*~y))
                     ) ▶₀ #i2 )
                case B_3_receive
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( Commit( a2, b2,
                           <'R', 'I', map(~s, $p)^~x, map(~s, $p)^~y, h(map(~s, $p)^(~x*~y))>
                   ) @ #i2 )
              case B_4_send
              solve( St_B_4( a2, id.1, ltk, b2, map(~s, $p)^~x, ~s, $p, ~y,
                             h(map(~s, $p)^(~x*~y))
                     ) ▶₀ #i2 )
                case B_3_receive
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case A_1_send_case_2
          by solve( !KU( ~x ) @ #vk.12 )
        next
          case B_2_send
          by solve( !KU( ~x ) @ #vk.14 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.12 )
        qed
      next
        case A_4_send
        solve( !KU( map(<'INITIATOR', ~k^inv(~x)>, p)^~x.1 ) @ #vk.5 )
          case B_2_send
          by solve( !KU( ~x.1 ) @ #vk.16 )
        next
          case c_exp
          by solve( !KU( ~x.1 ) @ #vk.14 )
        qed
      next
        case B_4_send
        solve( !KU( map(<'RESPONDER', ~k^inv(~y)>, p)^~x ) @ #vk.6 )
          case B_2_send
          by solve( !KU( ~x ) @ #vk.21 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.19 )
        qed
      next
        case c_senc
        solve( !KU( h(~k) ) @ #vk.12 )
          case c_h
          solve( !KU( ~k ) @ #vk.13 )
            case Reveal_ltk_A
            by contradiction /* from formulas */
          next
            case Reveal_ltk_B
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_senc
      solve( !KU( senc(s, h(~k)) ) @ #vk.7 )
        case A_1_send
        solve( splitEqs(1) )
          case split_case_1
          solve( !KU( h(t^~y) ) @ #vk.9 )
            case c_h
            solve( !KU( t^~y ) @ #vk.11 )
              case A_1_send
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case B_2_send_case_1
              solve( !KU( map(~s, p) ) @ #vk.9 )
                case A_1_send
                by solve( !KU( ~x ) @ #vk.12 )
              next
                case B_2_send
                by solve( !KU( ~y.1 ) @ #vk.14 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.11 )
                  case A_1_send
                  solve( !KU( ~k ) @ #vk.13 )
                    case Reveal_ltk_A
                    by contradiction /* from formulas */
                  next
                    case Reveal_ltk_B
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case B_2_send_case_2
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.12 )
            qed
          qed
        next
          case split_case_2
          solve( !KU( z^inv(~y) ) @ #vk.7 )
            case A_1_send_case_1
            by solve( !KU( ~x.1 ) @ #vk.13 )
          next
            case A_1_send_case_2
            by solve( !KU( ~x.1 ) @ #vk.14 )
          next
            case B_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.14 )
          next
            case B_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.13 )
          qed
        next
          case split_case_3
          solve( !KU( h(x^(~y*x.1)) ) @ #vk.9 )
            case c_h
            solve( !KU( x^(~y*x.1) ) @ #vk.11 )
              case A_1_send_case_1
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case A_1_send_case_2
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case A_1_send_case_3
              by solve( !KU( ~x.2 ) @ #vk.15 )
            next
              case A_1_send_case_4
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case A_1_send_case_5
              by solve( !KU( ~x.3 ) @ #vk.16 )
            next
              case B_2_send_case_1
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case B_2_send_case_2
              solve( !KU( map(~s, p)^x ) @ #vk.9 )
                case A_1_send_case_1
                by solve( !KU( ~x ) @ #vk.12 )
              next
                case A_1_send_case_2
                by solve( !KU( ~x ) @ #vk.14 )
              next
                case A_1_send_case_3
                by solve( !KU( ~x.1 ) @ #vk.15 )
              next
                case A_1_send_case_4
                by solve( !KU( ~x.1 ) @ #vk.15 )
              next
                case A_1_send_case_5
                by solve( !KU( ~x.2 ) @ #vk.17 )
              next
                case B_2_send_case_1
                by solve( !KU( ~y ) @ #vk.14 )
              next
                case B_2_send_case_2
                by solve( !KU( ~y ) @ #vk.19 )
              next
                case B_2_send_case_3
                by solve( !KU( ~y.1 ) @ #vk.17 )
              next
                case B_2_send_case_4
                by solve( !KU( ~y.1 ) @ #vk.17 )
              next
                case B_2_send_case_5
                by solve( !KU( ~y.1 ) @ #vk.19 )
              next
                case c_exp
                solve( !KU( map(~s, p) ) @ #vk.13 )
                  case A_1_send
                  by solve( !KU( ~x.1 ) @ #vk.15 )
                next
                  case B_2_send
                  by solve( !KU( ~y.1 ) @ #vk.17 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.14 )
                    case A_1_send
                    solve( !KU( ~k ) @ #vk.16 )
                      case Reveal_ltk_A
                      by contradiction /* from formulas */
                    next
                      case Reveal_ltk_B
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case B_2_send_case_3
              by solve( !KU( ~y.1 ) @ #vk.19 )
            next
              case B_2_send_case_4
              by solve( !KU( ~y.1 ) @ #vk.16 )
            next
              case B_2_send_case_5
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case B_2_send_case_6
              by solve( !KU( ~y.1 ) @ #vk.17 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.14 )
            qed
          qed
        next
          case split_case_4
          solve( !KU( x^inv((~y*x.1)) ) @ #vk.7 )
            case A_1_send_case_1
            by solve( !KU( ~x.2 ) @ #vk.13 )
          next
            case A_1_send_case_2
            by solve( !KU( ~x.2 ) @ #vk.14 )
          next
            case B_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.14 )
          next
            case B_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.14 )
          qed
        next
          case split_case_5
          solve( !KU( x^(x.1*inv(~y)) ) @ #vk.7 )
            case A_1_send_case_1
            by solve( !KU( ~y ) @ #vk.12 )
          next
            case A_1_send_case_2
            by solve( !KU( ~y ) @ #vk.14 )
          next
            case A_1_send_case_3
            by solve( !KU( ~x.2 ) @ #vk.14 )
          next
            case A_1_send_case_4
            by solve( !KU( ~x.2 ) @ #vk.15 )
          next
            case B_2_send_case_1
            by solve( !KU( ~y ) @ #vk.18 )
          next
            case B_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.20 )
          next
            case B_2_send_case_3
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case B_2_send_case_4
            by solve( !KU( ~y.1 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.15 )
          qed
        next
          case split_case_6
          solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.7 )
            case A_1_send_case_1
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case A_1_send_case_2
            by solve( !KU( ~y ) @ #vk.15 )
          next
            case A_1_send_case_3
            by solve( !KU( ~x.3 ) @ #vk.14 )
          next
            case A_1_send_case_4
            by solve( !KU( ~x.3 ) @ #vk.15 )
          next
            case B_2_send_case_1
            by solve( !KU( ~y ) @ #vk.19 )
          next
            case B_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.21 )
          next
            case B_2_send_case_3
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case B_2_send_case_4
            by solve( !KU( ~y.1 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.16 )
          qed
        qed
      next
        case A_4_send
        solve( !KU( ~k^inv(~x) ) @ #vk.13 )
          case c_exp
          solve( !KU( ~k ) @ #vk.14 )
            case Reveal_ltk_A
            by contradiction /* from formulas */
          next
            case Reveal_ltk_B
            by contradiction /* from formulas */
          qed
        qed
      next
        case B_4_send
        solve( !KU( senc(<'INITIATOR', map(s, p.1)^~y>, h(~k)) ) @ #vk.12 )
          case c_senc
          solve( !KU( h(~k) ) @ #vk.19 )
            case c_h
            solve( !KU( ~k ) @ #vk.21 )
              case Reveal_ltk_A
              by contradiction /* from formulas */
            next
              case Reveal_ltk_B
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( h(~k) ) @ #vk.12 )
          case c_h
          solve( !KU( ~k ) @ #vk.13 )
            case Reveal_ltk_A
            by contradiction /* from formulas */
          next
            case Reveal_ltk_B
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy:
  all-traces
  "∀ A x #i.
    (Secret( A, x ) @ #i) ⇒
    ((¬(∃ #j. K( x ) @ #j)) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A x #i.
  (Secret( A, x ) @ #i)
 ∧
  (∃ #j. (K( x ) @ #j)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Secret( A, x ) @ #i )
  case A_5_receive
  solve( St_A_4( A, id, ltk, B, x, s, p, gy, x.1 ) ▶₀ #i )
    case A_4_send
    solve( !KU( senc(<'RESPONDER', map(~s, $p)^~x>, h(z)) ) @ #vk.1 )
      case B_4_send
      solve( !KU( h(map(~s, $p)^(~x*~y)) ) @ #vk.1 )
        case c_h
        solve( !KU( map(~s, $p)^(~x*~y) ) @ #vk.13 )
          case A_1_send_case_1
          by solve( !KU( ~y ) @ #vk.14 )
        next
          case A_1_send_case_2
          by solve( !KU( ~x ) @ #vk.17 )
        next
          case B_2_send_case_1
          by solve( !KU( ~x ) @ #vk.14 )
        next
          case B_2_send_case_2
          by solve( !KU( ~y.1 ) @ #vk.18 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.16 )
        qed
      qed
    next
      case c_senc
      solve( splitEqs(1) )
        case split_case_1
        solve( !KU( h(gy^~x) ) @ #vk.1 )
          case c_h
          solve( !KU( gy^~x ) @ #vk.7 )
            case A_1_send_case_1
            solve( !KU( map(~s, $p) ) @ #vk.6 )
              case A_1_send
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case B_2_send
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case c_map
              solve( !KU( ~s ) @ #vk.7 )
                case A_1_send
                solve( !KU( ~k ) @ #vk.10 )
                  case Reveal_ltk_A
                  by contradiction /* from formulas */
                next
                  case Reveal_ltk_B
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case A_1_send_case_2
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case B_2_send
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.8 )
          qed
        qed
      next
        case split_case_2
        solve( !KU( z^inv(~x) ) @ #vk.5 )
          case A_1_send_case_1
          by solve( !KU( ~x.1 ) @ #vk.9 )
        next
          case A_1_send_case_2
          by solve( !KU( ~x.1 ) @ #vk.10 )
        next
          case B_2_send_case_1
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case B_2_send_case_2
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.9 )
        qed
      next
        case split_case_3
        solve( !KU( h(x.1^(~x*x.2)) ) @ #vk.1 )
          case c_h
          solve( !KU( x.1^(~x*x.2) ) @ #vk.7 )
            case A_1_send_case_1
            by solve( !KU( ~x ) @ #vk.8 )
          next
            case A_1_send_case_2
            solve( !KU( map(~s, $p)^x.1 ) @ #vk.6 )
              case A_1_send_case_1
              by solve( !KU( ~x ) @ #vk.6 )
            next
              case A_1_send_case_2
              by solve( !KU( ~x ) @ #vk.10 )
            next
              case A_1_send_case_3
              by solve( !KU( ~x ) @ #vk.11 )
            next
              case A_1_send_case_4
              by solve( !KU( ~x ) @ #vk.11 )
            next
              case A_1_send_case_5
              by solve( !KU( ~x ) @ #vk.13 )
            next
              case B_2_send_case_1
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case B_2_send_case_2
              by solve( !KU( ~y ) @ #vk.17 )
            next
              case B_2_send_case_3
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case B_2_send_case_4
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case B_2_send_case_5
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case c_exp
              solve( !KU( map(~s, $p) ) @ #vk.9 )
                case A_1_send
                by solve( !KU( ~x ) @ #vk.11 )
              next
                case B_2_send
                by solve( !KU( ~y ) @ #vk.11 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.10 )
                  case A_1_send
                  solve( !KU( ~k ) @ #vk.13 )
                    case Reveal_ltk_A
                    by contradiction /* from formulas */
                  next
                    case Reveal_ltk_B
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case A_1_send_case_3
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case A_1_send_case_4
            by solve( !KU( ~x.2 ) @ #vk.11 )
          next
            case A_1_send_case_5
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case A_1_send_case_6
            by solve( !KU( ~x.3 ) @ #vk.12 )
          next
            case B_2_send_case_1
            by solve( !KU( ~x ) @ #vk.8 )
          next
            case B_2_send_case_2
            by solve( !KU( ~x ) @ #vk.16 )
          next
            case B_2_send_case_3
            by solve( !KU( ~y ) @ #vk.11 )
          next
            case B_2_send_case_4
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case B_2_send_case_5
            by solve( !KU( ~y ) @ #vk.12 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.10 )
          qed
        qed
      next
        case split_case_4
        solve( !KU( x.1^(x.2*inv(~x)) ) @ #vk.5 )
          case A_1_send_case_1
          by solve( !KU( ~x ) @ #vk.8 )
        next
          case A_1_send_case_2
          by solve( !KU( ~x ) @ #vk.10 )
        next
          case A_1_send_case_3
          by solve( !KU( ~x.2 ) @ #vk.10 )
        next
          case A_1_send_case_4
          by solve( !KU( ~x.2 ) @ #vk.11 )
        next
          case B_2_send_case_1
          by solve( !KU( ~x ) @ #vk.15 )
        next
          case B_2_send_case_2
          by solve( !KU( ~x ) @ #vk.17 )
        next
          case B_2_send_case_3
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case B_2_send_case_4
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.11 )
        qed
      next
        case split_case_5
        solve( !KU( x.1^inv((~x*x.2)) ) @ #vk.5 )
          case A_1_send_case_1
          by solve( !KU( ~x.2 ) @ #vk.9 )
        next
          case A_1_send_case_2
          by solve( !KU( ~x.2 ) @ #vk.10 )
        next
          case B_2_send_case_1
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case B_2_send_case_2
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.10 )
        qed
      next
        case split_case_6
        solve( !KU( x.1^(x.2*inv((~x*x.3))) ) @ #vk.5 )
          case A_1_send_case_1
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case A_1_send_case_2
          by solve( !KU( ~x ) @ #vk.11 )
        next
          case A_1_send_case_3
          by solve( !KU( ~x.3 ) @ #vk.10 )
        next
          case A_1_send_case_4
          by solve( !KU( ~x.3 ) @ #vk.11 )
        next
          case B_2_send_case_1
          by solve( !KU( ~x ) @ #vk.16 )
        next
          case B_2_send_case_2
          by solve( !KU( ~x ) @ #vk.18 )
        next
          case B_2_send_case_3
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case B_2_send_case_4
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.12 )
        qed
      qed
    qed
  qed
next
  case B_4_send
  solve( St_B_4( A, id, ltk, A.1, gx, s, p, y, x ) ▶₀ #i )
    case B_3_receive
    solve( !KU( senc(<'INITIATOR', map(s, p)^~y>, h(z)) ) @ #vk.1 )
      case A_4_send
      solve( !KU( h(map(s, p)^(~x*~y)) ) @ #vk.1 )
        case c_h
        solve( !KU( map(s, p)^(~x*~y) ) @ #vk.12 )
          case A_1_send_case_1
          by solve( !KU( ~y ) @ #vk.13 )
        next
          case A_1_send_case_2
          by solve( !KU( ~x.1 ) @ #vk.16 )
        next
          case B_2_send_case_1
          by solve( !KU( ~x ) @ #vk.13 )
        next
          case B_2_send_case_2
          by solve( !KU( ~y.1 ) @ #vk.18 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.15 )
        qed
      qed
    next
      case c_senc
      solve( !KU( senc(s, h(~k)) ) @ #vk.8 )
        case A_1_send
        solve( splitEqs(1) )
          case split_case_1
          solve( !KU( h(gx^~y) ) @ #vk.3 )
            case c_h
            solve( !KU( gx^~y ) @ #vk.11 )
              case A_1_send
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case B_2_send_case_1
              solve( !KU( map(~s, p) ) @ #vk.9 )
                case A_1_send
                by solve( !KU( ~x ) @ #vk.12 )
              next
                case B_2_send
                by solve( !KU( ~y.1 ) @ #vk.14 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.11 )
                  case A_1_send
                  solve( !KU( ~k ) @ #vk.13 )
                    case Reveal_ltk_A
                    by contradiction /* from formulas */
                  next
                    case Reveal_ltk_B
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case B_2_send_case_2
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.12 )
            qed
          qed
        next
          case split_case_2
          solve( !KU( z^inv(~y) ) @ #vk.8 )
            case A_1_send_case_1
            by solve( !KU( ~x.1 ) @ #vk.13 )
          next
            case A_1_send_case_2
            by solve( !KU( ~x.1 ) @ #vk.14 )
          next
            case B_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.14 )
          next
            case B_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.13 )
          qed
        next
          case split_case_3
          solve( !KU( h(x^(~y*x.1)) ) @ #vk.3 )
            case c_h
            solve( !KU( x^(~y*x.1) ) @ #vk.11 )
              case A_1_send_case_1
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case A_1_send_case_2
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case A_1_send_case_3
              by solve( !KU( ~x.2 ) @ #vk.15 )
            next
              case A_1_send_case_4
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case A_1_send_case_5
              by solve( !KU( ~x.3 ) @ #vk.16 )
            next
              case B_2_send_case_1
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case B_2_send_case_2
              solve( !KU( map(~s, p)^x ) @ #vk.9 )
                case A_1_send_case_1
                by solve( !KU( ~x ) @ #vk.12 )
              next
                case A_1_send_case_2
                by solve( !KU( ~x ) @ #vk.14 )
              next
                case A_1_send_case_3
                by solve( !KU( ~x.1 ) @ #vk.15 )
              next
                case A_1_send_case_4
                by solve( !KU( ~x.1 ) @ #vk.15 )
              next
                case A_1_send_case_5
                by solve( !KU( ~x.2 ) @ #vk.17 )
              next
                case B_2_send_case_1
                by solve( !KU( ~y ) @ #vk.14 )
              next
                case B_2_send_case_2
                by solve( !KU( ~y ) @ #vk.19 )
              next
                case B_2_send_case_3
                by solve( !KU( ~y.1 ) @ #vk.17 )
              next
                case B_2_send_case_4
                by solve( !KU( ~y.1 ) @ #vk.17 )
              next
                case B_2_send_case_5
                by solve( !KU( ~y.1 ) @ #vk.19 )
              next
                case c_exp
                solve( !KU( map(~s, p) ) @ #vk.13 )
                  case A_1_send
                  by solve( !KU( ~x.1 ) @ #vk.15 )
                next
                  case B_2_send
                  by solve( !KU( ~y.1 ) @ #vk.17 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.14 )
                    case A_1_send
                    solve( !KU( ~k ) @ #vk.16 )
                      case Reveal_ltk_A
                      by contradiction /* from formulas */
                    next
                      case Reveal_ltk_B
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case B_2_send_case_3
              by solve( !KU( ~y.1 ) @ #vk.19 )
            next
              case B_2_send_case_4
              by solve( !KU( ~y.1 ) @ #vk.16 )
            next
              case B_2_send_case_5
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case B_2_send_case_6
              by solve( !KU( ~y.1 ) @ #vk.17 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.14 )
            qed
          qed
        next
          case split_case_4
          solve( !KU( x^inv((~y*x.1)) ) @ #vk.8 )
            case A_1_send_case_1
            by solve( !KU( ~x.2 ) @ #vk.13 )
          next
            case A_1_send_case_2
            by solve( !KU( ~x.2 ) @ #vk.14 )
          next
            case B_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.14 )
          next
            case B_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.14 )
          qed
        next
          case split_case_5
          solve( !KU( x^(x.1*inv(~y)) ) @ #vk.8 )
            case A_1_send_case_1
            by solve( !KU( ~y ) @ #vk.12 )
          next
            case A_1_send_case_2
            by solve( !KU( ~y ) @ #vk.14 )
          next
            case A_1_send_case_3
            by solve( !KU( ~x.2 ) @ #vk.14 )
          next
            case A_1_send_case_4
            by solve( !KU( ~x.2 ) @ #vk.15 )
          next
            case B_2_send_case_1
            by solve( !KU( ~y ) @ #vk.18 )
          next
            case B_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.20 )
          next
            case B_2_send_case_3
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case B_2_send_case_4
            by solve( !KU( ~y.1 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.15 )
          qed
        next
          case split_case_6
          solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.8 )
            case A_1_send_case_1
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case A_1_send_case_2
            by solve( !KU( ~y ) @ #vk.15 )
          next
            case A_1_send_case_3
            by solve( !KU( ~x.3 ) @ #vk.14 )
          next
            case A_1_send_case_4
            by solve( !KU( ~x.3 ) @ #vk.15 )
          next
            case B_2_send_case_1
            by solve( !KU( ~y ) @ #vk.19 )
          next
            case B_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.21 )
          next
            case B_2_send_case_3
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case B_2_send_case_4
            by solve( !KU( ~y.1 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.16 )
          qed
        qed
      next
        case A_4_send
        solve( !KU( ~k^inv(~x) ) @ #vk.13 )
          case c_exp
          solve( !KU( ~k ) @ #vk.14 )
            case Reveal_ltk_A
            by contradiction /* from formulas */
          next
            case Reveal_ltk_B
            by contradiction /* from formulas */
          qed
        qed
      next
        case B_4_send
        solve( !KU( senc(<'INITIATOR', map(s, p.1)^~y>, h(~k)) ) @ #vk.12 )
          case c_senc
          solve( !KU( h(~k) ) @ #vk.19 )
            case c_h
            solve( !KU( ~k ) @ #vk.21 )
              case Reveal_ltk_A
              by contradiction /* from formulas */
            next
              case Reveal_ltk_B
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( h(~k) ) @ #vk.12 )
          case c_h
          solve( !KU( ~k ) @ #vk.13 )
            case Reveal_ltk_A
            by contradiction /* from formulas */
          next
            case Reveal_ltk_B
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy_PFS:
  all-traces
  "∀ A x #i.
    (Secret( A, x ) @ #i) ⇒
    ((¬(∃ #j. K( x ) @ #j)) ∨
     (∃ X #r. ((Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)) ∧ (#r < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A x #i.
  (Secret( A, x ) @ #i)
 ∧
  (∃ #j. (K( x ) @ #j)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ¬(#r < #i))"
*/
simplify
solve( Secret( A, x ) @ #i )
  case A_5_receive
  solve( St_A_4( A, id, ltk, B, x, s, p, gy, x.1 ) ▶₀ #i )
    case A_4_send
    solve( !KU( senc(<'RESPONDER', map(~s, $p)^~x>, h(z)) ) @ #vk.1 )
      case B_4_send
      solve( !KU( h(map(~s, $p)^(~x*~y)) ) @ #vk.1 )
        case c_h
        solve( !KU( map(~s, $p)^(~x*~y) ) @ #vk.13 )
          case A_1_send_case_1
          by solve( !KU( ~y ) @ #vk.14 )
        next
          case A_1_send_case_2
          by solve( !KU( ~x ) @ #vk.17 )
        next
          case B_2_send_case_1
          by solve( !KU( ~x ) @ #vk.14 )
        next
          case B_2_send_case_2
          by solve( !KU( ~y.1 ) @ #vk.18 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.16 )
        qed
      qed
    next
      case c_senc
      solve( splitEqs(1) )
        case split_case_1
        solve( !KU( h(gy^~x) ) @ #vk.1 )
          case c_h
          solve( !KU( gy^~x ) @ #vk.7 )
            case A_1_send_case_1
            solve( !KU( map(~s, $p) ) @ #vk.6 )
              case A_1_send
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case B_2_send
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case c_map
              solve( !KU( ~s ) @ #vk.7 )
                case A_1_send
                solve( !KU( ~k ) @ #vk.10 )
                  case Reveal_ltk_A
                  by contradiction /* from formulas */
                next
                  case Reveal_ltk_B
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case A_1_send_case_2
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case B_2_send
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.8 )
          qed
        qed
      next
        case split_case_2
        solve( !KU( z^inv(~x) ) @ #vk.5 )
          case A_1_send_case_1
          by solve( !KU( ~x.1 ) @ #vk.9 )
        next
          case A_1_send_case_2
          by solve( !KU( ~x.1 ) @ #vk.10 )
        next
          case B_2_send_case_1
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case B_2_send_case_2
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.9 )
        qed
      next
        case split_case_3
        solve( !KU( h(x.1^(~x*x.2)) ) @ #vk.1 )
          case c_h
          solve( !KU( x.1^(~x*x.2) ) @ #vk.7 )
            case A_1_send_case_1
            by solve( !KU( ~x ) @ #vk.8 )
          next
            case A_1_send_case_2
            solve( !KU( map(~s, $p)^x.1 ) @ #vk.6 )
              case A_1_send_case_1
              by solve( !KU( ~x ) @ #vk.6 )
            next
              case A_1_send_case_2
              by solve( !KU( ~x ) @ #vk.10 )
            next
              case A_1_send_case_3
              by solve( !KU( ~x ) @ #vk.11 )
            next
              case A_1_send_case_4
              by solve( !KU( ~x ) @ #vk.11 )
            next
              case A_1_send_case_5
              by solve( !KU( ~x ) @ #vk.13 )
            next
              case B_2_send_case_1
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case B_2_send_case_2
              by solve( !KU( ~y ) @ #vk.17 )
            next
              case B_2_send_case_3
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case B_2_send_case_4
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case B_2_send_case_5
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case c_exp
              solve( !KU( map(~s, $p) ) @ #vk.9 )
                case A_1_send
                by solve( !KU( ~x ) @ #vk.11 )
              next
                case B_2_send
                by solve( !KU( ~y ) @ #vk.11 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.10 )
                  case A_1_send
                  solve( !KU( ~k ) @ #vk.13 )
                    case Reveal_ltk_A
                    by contradiction /* from formulas */
                  next
                    case Reveal_ltk_B
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case A_1_send_case_3
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case A_1_send_case_4
            by solve( !KU( ~x.2 ) @ #vk.11 )
          next
            case A_1_send_case_5
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case A_1_send_case_6
            by solve( !KU( ~x.3 ) @ #vk.12 )
          next
            case B_2_send_case_1
            by solve( !KU( ~x ) @ #vk.8 )
          next
            case B_2_send_case_2
            by solve( !KU( ~x ) @ #vk.16 )
          next
            case B_2_send_case_3
            by solve( !KU( ~y ) @ #vk.11 )
          next
            case B_2_send_case_4
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case B_2_send_case_5
            by solve( !KU( ~y ) @ #vk.12 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.10 )
          qed
        qed
      next
        case split_case_4
        solve( !KU( x.1^(x.2*inv(~x)) ) @ #vk.5 )
          case A_1_send_case_1
          by solve( !KU( ~x ) @ #vk.8 )
        next
          case A_1_send_case_2
          by solve( !KU( ~x ) @ #vk.10 )
        next
          case A_1_send_case_3
          by solve( !KU( ~x.2 ) @ #vk.10 )
        next
          case A_1_send_case_4
          by solve( !KU( ~x.2 ) @ #vk.11 )
        next
          case B_2_send_case_1
          by solve( !KU( ~x ) @ #vk.15 )
        next
          case B_2_send_case_2
          by solve( !KU( ~x ) @ #vk.17 )
        next
          case B_2_send_case_3
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case B_2_send_case_4
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.11 )
        qed
      next
        case split_case_5
        solve( !KU( x.1^inv((~x*x.2)) ) @ #vk.5 )
          case A_1_send_case_1
          by solve( !KU( ~x.2 ) @ #vk.9 )
        next
          case A_1_send_case_2
          by solve( !KU( ~x.2 ) @ #vk.10 )
        next
          case B_2_send_case_1
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case B_2_send_case_2
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.10 )
        qed
      next
        case split_case_6
        solve( !KU( x.1^(x.2*inv((~x*x.3))) ) @ #vk.5 )
          case A_1_send_case_1
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case A_1_send_case_2
          by solve( !KU( ~x ) @ #vk.11 )
        next
          case A_1_send_case_3
          by solve( !KU( ~x.3 ) @ #vk.10 )
        next
          case A_1_send_case_4
          by solve( !KU( ~x.3 ) @ #vk.11 )
        next
          case B_2_send_case_1
          by solve( !KU( ~x ) @ #vk.16 )
        next
          case B_2_send_case_2
          by solve( !KU( ~x ) @ #vk.18 )
        next
          case B_2_send_case_3
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case B_2_send_case_4
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.12 )
        qed
      qed
    qed
  qed
next
  case B_4_send
  solve( St_B_4( A, id, ltk, A.1, gx, s, p, y, x ) ▶₀ #i )
    case B_3_receive
    solve( !KU( senc(<'INITIATOR', map(s, p)^~y>, h(z)) ) @ #vk.1 )
      case A_4_send
      solve( !KU( h(map(s, p)^(~x*~y)) ) @ #vk.1 )
        case c_h
        solve( !KU( map(s, p)^(~x*~y) ) @ #vk.12 )
          case A_1_send_case_1
          by solve( !KU( ~y ) @ #vk.13 )
        next
          case A_1_send_case_2
          by solve( !KU( ~x.1 ) @ #vk.16 )
        next
          case B_2_send_case_1
          by solve( !KU( ~x ) @ #vk.13 )
        next
          case B_2_send_case_2
          by solve( !KU( ~y.1 ) @ #vk.18 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.15 )
        qed
      qed
    next
      case c_senc
      solve( !KU( senc(s, h(~k)) ) @ #vk.8 )
        case A_1_send
        solve( splitEqs(1) )
          case split_case_1
          solve( !KU( h(gx^~y) ) @ #vk.3 )
            case c_h
            solve( !KU( gx^~y ) @ #vk.11 )
              case A_1_send
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case B_2_send_case_1
              solve( !KU( map(~s, p) ) @ #vk.9 )
                case A_1_send
                by solve( !KU( ~x ) @ #vk.12 )
              next
                case B_2_send
                by solve( !KU( ~y.1 ) @ #vk.14 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.11 )
                  case A_1_send
                  solve( !KU( ~k ) @ #vk.13 )
                    case Reveal_ltk_A
                    by contradiction /* from formulas */
                  next
                    case Reveal_ltk_B
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case B_2_send_case_2
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.12 )
            qed
          qed
        next
          case split_case_2
          solve( !KU( z^inv(~y) ) @ #vk.8 )
            case A_1_send_case_1
            by solve( !KU( ~x.1 ) @ #vk.13 )
          next
            case A_1_send_case_2
            by solve( !KU( ~x.1 ) @ #vk.14 )
          next
            case B_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.14 )
          next
            case B_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.13 )
          qed
        next
          case split_case_3
          solve( !KU( h(x^(~y*x.1)) ) @ #vk.3 )
            case c_h
            solve( !KU( x^(~y*x.1) ) @ #vk.11 )
              case A_1_send_case_1
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case A_1_send_case_2
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case A_1_send_case_3
              by solve( !KU( ~x.2 ) @ #vk.15 )
            next
              case A_1_send_case_4
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case A_1_send_case_5
              by solve( !KU( ~x.3 ) @ #vk.16 )
            next
              case B_2_send_case_1
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case B_2_send_case_2
              solve( !KU( map(~s, p)^x ) @ #vk.9 )
                case A_1_send_case_1
                by solve( !KU( ~x ) @ #vk.12 )
              next
                case A_1_send_case_2
                by solve( !KU( ~x ) @ #vk.14 )
              next
                case A_1_send_case_3
                by solve( !KU( ~x.1 ) @ #vk.15 )
              next
                case A_1_send_case_4
                by solve( !KU( ~x.1 ) @ #vk.15 )
              next
                case A_1_send_case_5
                by solve( !KU( ~x.2 ) @ #vk.17 )
              next
                case B_2_send_case_1
                by solve( !KU( ~y ) @ #vk.14 )
              next
                case B_2_send_case_2
                by solve( !KU( ~y ) @ #vk.19 )
              next
                case B_2_send_case_3
                by solve( !KU( ~y.1 ) @ #vk.17 )
              next
                case B_2_send_case_4
                by solve( !KU( ~y.1 ) @ #vk.17 )
              next
                case B_2_send_case_5
                by solve( !KU( ~y.1 ) @ #vk.19 )
              next
                case c_exp
                solve( !KU( map(~s, p) ) @ #vk.13 )
                  case A_1_send
                  by solve( !KU( ~x.1 ) @ #vk.15 )
                next
                  case B_2_send
                  by solve( !KU( ~y.1 ) @ #vk.17 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.14 )
                    case A_1_send
                    solve( !KU( ~k ) @ #vk.16 )
                      case Reveal_ltk_A
                      by contradiction /* from formulas */
                    next
                      case Reveal_ltk_B
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case B_2_send_case_3
              by solve( !KU( ~y.1 ) @ #vk.19 )
            next
              case B_2_send_case_4
              by solve( !KU( ~y.1 ) @ #vk.16 )
            next
              case B_2_send_case_5
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case B_2_send_case_6
              by solve( !KU( ~y.1 ) @ #vk.17 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.14 )
            qed
          qed
        next
          case split_case_4
          solve( !KU( x^inv((~y*x.1)) ) @ #vk.8 )
            case A_1_send_case_1
            by solve( !KU( ~x.2 ) @ #vk.13 )
          next
            case A_1_send_case_2
            by solve( !KU( ~x.2 ) @ #vk.14 )
          next
            case B_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.14 )
          next
            case B_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.14 )
          qed
        next
          case split_case_5
          solve( !KU( x^(x.1*inv(~y)) ) @ #vk.8 )
            case A_1_send_case_1
            by solve( !KU( ~y ) @ #vk.12 )
          next
            case A_1_send_case_2
            by solve( !KU( ~y ) @ #vk.14 )
          next
            case A_1_send_case_3
            by solve( !KU( ~x.2 ) @ #vk.14 )
          next
            case A_1_send_case_4
            by solve( !KU( ~x.2 ) @ #vk.15 )
          next
            case B_2_send_case_1
            by solve( !KU( ~y ) @ #vk.18 )
          next
            case B_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.20 )
          next
            case B_2_send_case_3
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case B_2_send_case_4
            by solve( !KU( ~y.1 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.15 )
          qed
        next
          case split_case_6
          solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.8 )
            case A_1_send_case_1
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case A_1_send_case_2
            by solve( !KU( ~y ) @ #vk.15 )
          next
            case A_1_send_case_3
            by solve( !KU( ~x.3 ) @ #vk.14 )
          next
            case A_1_send_case_4
            by solve( !KU( ~x.3 ) @ #vk.15 )
          next
            case B_2_send_case_1
            by solve( !KU( ~y ) @ #vk.19 )
          next
            case B_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.21 )
          next
            case B_2_send_case_3
            by solve( !KU( ~y.1 ) @ #vk.15 )
          next
            case B_2_send_case_4
            by solve( !KU( ~y.1 ) @ #vk.16 )
          next
            case c_exp
            by solve( !KU( ~y ) @ #vk.16 )
          qed
        qed
      next
        case A_4_send
        solve( !KU( ~k^inv(~x) ) @ #vk.13 )
          case c_exp
          solve( !KU( ~k ) @ #vk.14 )
            case Reveal_ltk_A
            by contradiction /* from formulas */
          next
            case Reveal_ltk_B
            by contradiction /* from formulas */
          qed
        qed
      next
        case B_4_send
        solve( !KU( senc(<'INITIATOR', map(s, p.1)^~y>, h(~k)) ) @ #vk.12 )
          case c_senc
          solve( !KU( h(~k) ) @ #vk.19 )
            case c_h
            solve( !KU( ~k ) @ #vk.21 )
              case Reveal_ltk_A
              by contradiction /* from formulas */
            next
              case Reveal_ltk_B
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( h(~k) ) @ #vk.12 )
          case c_h
          solve( !KU( ~k ) @ #vk.13 )
            case Reveal_ltk_A
            by contradiction /* from formulas */
          next
            case Reveal_ltk_B
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end